
UNDERSTAND THE CONCEPT OF BRANCHING THE REPOSITORY (all code developers):
  - clone the repository 2018cougarpowerup from CougarTech 2228 github
  - select, right click, choose team->Switch to->New Branch
  - call your branch your name and 0.1 
  - any changes you make to your branch you can commit to github without having to merge
  
SETUP WINDOW DESKTOP PCS WITH THE CORRECT DEVELOPMENT ENVIRONMENT -
  done - add JDK (Verify the correct version) (Note: Mr. Clair will need to login with his account to the PC to install this)
  done - add NAVX libraries
  done - verify CTRE Libraries are the latest Phoenix version
  - add Mindsensor libraries
  - add the USB RoboRio drivers to the computers.  Need Mr. Clair's log in to install.  ?
    
DONE - VERIFY THE 2018 FIRMWARE AND LIBRARIES WITH THE ROBOX (Nathan leading)
 done - update the RoboRio with the latest firmware and confirm version # on DriverStation
 done - connect to the RoboRio with a browser (internet explorer? silverlight?) and confirm components appear
 done - update the firmware on one CANTalon and confirm with self-test on RoboRio webpage
 done - add a TalonSRX to the Robot.java and confirm you can turn it on
 done - attach a motor to the TalonSRX (some available in a box in top shelf of software cabinet) and confirm it moves
 done - update the other three CANTalons
 done - create a WPILib RobotDrive with the four Talons and confirm it will drive with a controller
 done - inform mechanical the Robox is available for use (to test "drive base in a day")
  
DONE - VERIFY THE RADIO CONFIGURATION TOOL
 done - download the latest tool
 done - program the radio
 done - confirm that the drive station can connect
 done - confirm that eclipse can download code wirelessly
  
VERIFY AUTONOMOUS STRATEGY
DONE - Create a StringCommand file (reference or copy the one in CougarTechSoftware github
DONE  + pass a string name
DONE  + print the name in initialize, execute, and end (uniquely in each function)
DONE - Instantiate (create by calling new StringCommand) a string command in autonomousInit and call .start()
DONE - in autonomousPeriodic call Scheduler.getInstance().run()
DONE - download your code to the robox, and enter autonomous
DONE - confirm you see your print lines
  - create a second StringCommand with a different name
  - instantiate a CommandGroup (WPI)
  - call <your group name>.addSequential(firstStringCommand)
         <your group name>.addSequential(secondStringCommand);
  - confirm you see the first one's print lines and then the second one's print lines
  - change Sequential to Parallel, confirm you see both object print lines at once
  
CUBINATOR
  - add stall current shut off function similar to drive base
  - display motor current on SmartDashboard for investigating where stall current should be
  - get a stall current from SmartDashboard for testing
  - test the stall current shut off
  
FINE TUNING THE LOGGER
DONE  - download FileZilla
DONE  - add the DebugLogger from CougarTechSoftware github
DONE  - add an openCsvFile() closeCsvFile() - currently opening in init and needs to be added like fclose()
DONE  - csv time field needs to have a "," after it (before the data)
DONE  - add some debug lines to be called (examples in 2018DriveBase, Chester is familiar with this)
DONE  - open FileZilla and connect to the RoboRio 10.22.22.105 with no user name or password
DONE  - move to /home/lvusr/log directory
DONE  - copy over the latest log to your own log directory
DONE  - confirm your prints are there
  - remove logging calls showing on the console
  - define the string that creates the file in the DebugLogger class so the Robot doesn't have to pass it
  - add the ability to turn on/off logging to the console from SmartDashboard (put default number and get number)
  - floats print with too many decimal places, investigate how to limit this to a few digits
  
DONE - DRIVE STATION DATA
  - get the DriveStation class in the Robot.java
  - find the string we expect to display on the driveStation during the match in the game manual
  - call the function that gets the string and print it to the console
  - confirm you can change the string and it prints out using the Robox
  - get the alliance from the DriveStation (red vs. blue)
  - change the alliance on the drive station and confirm the code can retrieve it
  
ADD AN SRXMotorBase CLASS to be able to operate a single motor with the SRX controller
DONE  Phase I
  - Copy SRXDriveBase.java to SRXMtrBase.java
  - delete leftdrive motor stuff
  - rename rightdrive motor stuff
  - link up all the commands
  - integrate SRXDriveBaseCfg.java into SRXMtrBase 
  - Develop set commands to configure SRXMtrBase
  - Add a motor and debug.
  Phase II
  - add feedback encoder and enable feedback control
  - debug magic motion
  
 CONTROL A LED Strip with CAN commands from the ROBORIO
  Done - Go to CAN LED strip web page http://www.mindsensors.com/content/88-cheat-sheet-for-canlight-led-strip-controller-kit-for-frc-robots
  Done - Load required libraries to eclipse
  Done - Read "Guides - Full Tutorial on the mindsensors Configuration Tool"
  Done - Download configuration tool 
  Done - Read "Guides - The Complete Guide on Getting Started with CANLight"
  Done - Read "Documentation - Java" document
  Done- Read "Guides - C++/Java Library Installation and Examples"
  Done- Create a new project with iterative robot 
  Done - Create a CANLED class with the following methods
    1 basicColor  Alliance Color
    2 LEDFlash
    3 cycleColor
    4 LEDFade
    
ADD AN AngleIF CLASS
  - instantiate in Robot and pass as a parameter to drive base
 DONE - add functions the drive base uses (setZeroAngle(), getAngle(), getYaw(), getPitch(), getRoll())
  - add default the implementation the readings from the Roborio ?
  - download the navx libraries https://www.pdocs.kauailabs.com/navx-mxp/software/roborio-libraries/
  - Suggested reading:
     - Read yaw document https://www.pdocs.kauailabs.com/navx-mxp/guidance/yaw-drift/
     - Read code examples https://www.pdocs.kauailabs.com/navx-mxp/examples/field-oriented-drive/
      - Download code from Githup https://github.com/kauailabs/navxmxp
  - add the NavX
  - add some debug so we can verify functionality
  - access the NavX hardware and test your class
  - add documentation to the end that explains the difference between an accelerometer, gyro, and navx (see Mr. Farnam)
  
ADD A DistanceIF class (robot will use this to read distances and perpendicular correction)
  - instantiate in robot and pass to drive base
  - add functions the drive bases uses
     a. initDistance()
     b. setCalibrationNear()
     c. setCalibrationFar()
     d. getLeftDistance()
     e. getLeftFilteredDistance() 
     f. getRightDistance()
     g. getRightFilteredDistance()
     h. GetPerpendicularDistanceCorrection() - this uses WPI PIDController (see professor)
  - default set for no sensor enabled
  - add the ultra sonic sensor (Our Sensor is an Analog Device)
    - uses ultrasonic sensor HRLV-MaxSonar-EZ MB1013-000 from the electrical team (www.maxbotix.com)
    - need two sensors and sensor "horns" that we we used last year-
  - read up on this sensor
  - add debug and test functionality of the sensor
  - To get distance the sensor needs to be calibrated - need to have calibration software in UltrasonicSensor class.
  
  DONE - ADD A PNEUMATICS CLASS (robot will use this to control the pneumatics) (Used in 2015 robot code on Github)
  - instantiate in Robot
  - Read - https://wpilib.screenstepslive.com/s/currentCS/m/java/l/599707-operating-a-compressor-for-pneumatics
  - Read - https://wpilib.screenstepslive.com/s/currentCS/m/java/l/599708-operating-pneumatic-cylinders-solenoids
  
  UPGRADE STEAMWORKS to 2018
  - need to be able to drive Lamda with the 2018
  - upgrade roborio, talon srx, and compile code base 
  
  CAMERA and VISION
  - review how to hook up a camera to drive station, viewed through LabView and SmartDashboard
  - switch camera stream with an xbox button or SmartDashboard read
  - power a green light LED ring and capture an image
  
  LABELING
  - robox SRXCANTalons master/follower left and right need to be labeled as CAN id 1 through
  - label the laptop power adapters with 2228 and which laptop it goes to
  - every laptop bag should have a usb cable (and an ethernet cable)
  - drive laptops should have a xbox controller
  
  
  
  
  
  

        
